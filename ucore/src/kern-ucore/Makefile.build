include Kbuild.include
ifneq ($(MAKECMDGOALS),clean)
include $(KCONFIG_AUTOCONFIG)
endif

PHONY+=all subdir clean

# SPDX-License-Identifier: GPL-2.0
call_threshold := 10000

KASAN_SHADOW_OFFSET ?= 0xdffffc0000000000

CFLAGS_KASAN_MINIMAL := -fsanitize=kernel-address

cc-param = $(call cc-option, -mllvm -$(1), $(call cc-option, --param $(1)))

$(warning $(call cc-option, $(CFLAGS_KASAN_MINIMAL) -Werror))
ifeq ($(call cc-option, $(CFLAGS_KASAN_MINIMAL) -Werror),)
        $(warning Cannot use CONFIG_KASAN: \
            -fsanitize=kernel-address is not supported by compiler)
else
   # -fasan-shadow-offset fails without -fsanitize
   CFLAGS_KASAN_SHADOW := $(call cc-option, -fsanitize=kernel-address \
			-fasan-shadow-offset=$(KASAN_SHADOW_OFFSET), \
			$(call cc-option, -fsanitize=kernel-address \
			-mllvm -asan-mapping-offset=$(KASAN_SHADOW_OFFSET)))

   ifeq ($(strip $(CFLAGS_KASAN_SHADOW)),)
      CFLAGS_KASAN := $(CFLAGS_KASAN_MINIMAL)
   else
      # Now add all the compiler specific options that are valid standalone
      CFLAGS_KASAN := $(CFLAGS_KASAN_SHADOW) \
	$(call cc-param,asan-globals=1) \
	$(call cc-param,asan-instrumentation-with-call-threshold=$(call_threshold)) \
	$(call cc-param,asan-stack=1) \
	$(call cc-param,asan-use-after-scope=1) \
	$(call cc-param,asan-instrument-allocas=1)
   endif

endif

CFLAGS_KASAN_NOSANITIZE := -fno-builtin


#TARGET_CFLAGS := -g -ggdb
TARGET_CFLAGS += -fno-builtin -nostdlib  -nostdinc --std=gnu99 -Wall -fno-stack-protector
TARGET_CFLAGS += -D__KERNEL__ -D__KERN__
TARGET_CFLAGS += $(shell echo $(UCONFIG_ADDITIONAL_CFLAGS))
ifdef UCONFIG_PROFILER_ON
TARGET_CFLAGS += -pg
endif
#TARGET_CFLAGS += $(CFLAGS_KASAN)
TARGET_CFLAGS += -fsanitize-coverage=trace-pc

$(warning $(TARGET_CFLAGS))

TARGET_LDFLAGS += $(shell echo $(UCONFIG_ADDITIONAL_LDFLAGS))

KTREE_OBJ_ROOT := $(OBJPATH_ROOT)/kernel

export KTREE_OBJ_ROOT

KERN_INCLUDES := . libs syscall debug driver mm numa sync schedule process fs \
                 fs/swap fs/vfs fs/pipe fs/sfs fs/devs module kmodule sysconf \
                 dde36 network trap network/src/include

ifdef UCONFIG_HAVE_LINUX_DDE_BASE
KERN_INCLUDES += module/include
endif

TARGET_CFLAGS += $(addprefix -I$(KTREE)/, $(KERN_INCLUDES))

TARGET_CFLAGS += -include $(KCONFIG_AUTOHEADER)
ifneq ($(UCORE_TEST),)
TARGET_CFLAGS += -DUNITTEST=$(UCORE_TEST)
endif

ifneq ($(MAKECMDGOALS),clean)
include $(KTREE)/arch/$(ARCH)/include.mk
endif
TARGET_CFLAGS += $(addprefix -I$(KTREE)/arch/$(ARCH)/, $(ARCH_INLUCDES))
TARGET_CFLAGS += $(ARCH_CFLAGS)
TARGET_LDFLAGS += $(ARCH_LDFLAGS)

export TARGET_CFLAGS
export TARGET_LDFLAGS

KERNEL_BUILTIN_O := $(KTREE_OBJ_ROOT)/kernel-builtin.o
KERNEL_BUILTIN_LIST := $(KTREE_OBJ_ROOT)/.builtinlist.tmp

# touch proc.c again to ensure that, if no UCORE_TEST given in the next build, /bin/sh will be used.
all: $(KTREE_OBJ_ROOT) $(KERNEL_BUILTIN_O)
ifneq ($(UCORE_TEST),)
	$(Q)touch $(KTREE)/process/proc.c
endif
	$(Q)$(MAKE) KERNEL_BUILTIN=$(KERNEL_BUILTIN_O)  -C $(KTREE)/arch/$(ARCH) -f $(KTREE)/arch/$(ARCH)/Makefile.image all

$(KERNEL_BUILTIN_O): subdir
	@echo Building uCore Kernel for $(UCONFIG_ARCH)
	$(Q)$(TARGET_LD) $(TARGET_LDFLAGS) -r -o $@ $(shell xargs < $(KERNEL_BUILTIN_LIST))

$(KTREE_OBJ_ROOT):
	mkdir -p $@

clean:
	$(Q)rm -rf $(KTREE_OBJ_ROOT)
	$(Q)$(MAKE)  -C $(KTREE)/arch/$(ARCH) -f $(KTREE)/arch/$(ARCH)/Makefile.image clean

subdir: $(KTREE_OBJ_ROOT) $(KCONFIG_AUTOHEADER) $(KCONFIG_AUTOCONFIG) FORCE
	$(Q)rm -f $(KERNEL_BUILTIN_LIST)
	$(Q)touch $(KERNEL_BUILTIN_LIST)
ifneq ($(UCORE_TEST),)
	$(Q)touch $(KTREE)/process/proc.c
endif
	$(Q)$(MAKE) -f Makefile.subdir OBJPATH=$(KTREE_OBJ_ROOT) LOCALPATH=$(KTREE) BUILTINLIST=$(KERNEL_BUILTIN_LIST)

PHONY +=FORCE
FORCE:

.PHONY: $(PHONY)
